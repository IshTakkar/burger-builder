{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\burger-builder-copy\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false,\n          minLength: 1\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignUp: true\n    };\n\n    this.authModeChangeHandler = () => {\n      this.setState(previousState => {\n        return {\n          isSignUp: !previousState.isSignUp\n        };\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') vjjgjv;\n  }\n\n  formFillerHelper(elType, type, placeholder, value) {\n    return {\n      elementType: `${elType}`,\n      elementConfig: {\n        type: `${type}`,\n        placeholder: `${placeholder}`\n      },\n      value: `${value}`,\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false,\n      minLength: 1\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  inputChangedHandler(event, controlName) {\n    const updatedControl = { ...this.state.controls,\n      [controlName]: { ...this.state.controls[controlName],\n        value: event.target.value,\n        valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      }\n    };\n    this.setState({\n      controls: updatedControl\n    });\n  }\n\n  render() {\n    let inputFormArray = [];\n\n    for (let key in this.state.controls) {\n      inputFormArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    ;\n    let form = inputFormArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      value: formElement.config.value,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 20\n        }\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 28\n        }\n      }, this.props.error.message);\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 28\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, authRedirect, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, errorMessage, form, /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n      clicked: this.authModeChangeHandler,\n      btnType: \"Danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, \"SWITCH TO \", this.state.isSignUp ? 'SIGN-IN' : 'SIGN-UP'));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["D:/React/burger-builder-copy/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","Button","Input","Spinner","classes","actions","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","minLength","password","isSignUp","authModeChangeHandler","setState","previousState","submitHandler","event","preventDefault","props","onAuth","componentDidMount","buildingBurger","authRedirectPath","vjjgjv","formFillerHelper","elType","checkValidity","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","inputChangedHandler","controlName","updatedControl","target","render","inputFormArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","onSetAuthRedirectPath","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nclass Auth extends Component {\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/')\r\n            vjjgjv\r\n    }\r\n\r\n    formFillerHelper(elType, type, placeholder, value) {\r\n        return {\r\n            elementType: `${elType}`,\r\n            elementConfig: {\r\n                type: `${type}`,\r\n                placeholder: `${placeholder}`\r\n            },\r\n            value: `${value}`,\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false,\r\n            minLength: 1\r\n        }\r\n    }\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                minLength: 1\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n            }\r\n        },\r\n        isSignUp: true\r\n    }\r\n\r\n    checkValidity(value, rules) {\r\n        let isValid = true;\r\n        if (!rules) {\r\n            return true;\r\n        }\r\n\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid\r\n        }\r\n\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    authModeChangeHandler = () => {\r\n        this.setState(previousState => {\r\n            return { isSignUp: !previousState.isSignUp };\r\n        })\r\n    }\r\n\r\n    inputChangedHandler(event, controlName) {\r\n        const updatedControl = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        }\r\n        this.setState({ controls: updatedControl });\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n    }\r\n\r\n    render() {\r\n        let inputFormArray = [];\r\n        for (let key in this.state.controls) {\r\n            inputFormArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            })\r\n        };\r\n\r\n        let form = inputFormArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                value={formElement.config.value}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            />\r\n        ));\r\n        \r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if (this.props.error) {\r\n            errorMessage = <p>{this.props.error.message}</p>\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated)\r\n            authRedirect = <Redirect to=\"/\"/>\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {errorMessage}\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.authModeChangeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGN-IN' : 'SIGN-UP'}\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}