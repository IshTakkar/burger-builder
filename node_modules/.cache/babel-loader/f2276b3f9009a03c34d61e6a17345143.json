{"ast":null,"code":"// import React, { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import Button from '../../components/UI/Button/Button';\n// import Input from '../../components/UI/Input/Input';\n// import Spinner from '../../components/UI/Spinner/Spinner';\n// import classes from './Auth.module.css';\n// import * as actions from '../../store/actions/index';\n// class Auth extends Component {\n//     componentDidMount() {\n//         if (!this.props.buildingBurger && this.props.authRedirectPath !== '/')\n//             this.props.onSetAuthRedirectPath();\n//     }\n//     formFillerHelper(elType, type, placeholder, value) {\n//         return {\n//             elementType: `${elType}`,\n//             elementConfig: {\n//                 type: `${type}`,\n//                 placeholder: `${placeholder}`\n//             },\n//             value: `${value}`,\n//             validation: {\n//                 required: true\n//             },\n//             valid: false,\n//             touched: false,\n//             minLength: 1\n//         }\n//     }\n//     state = {\n//         controls: {\n//             email: {\n//                 elementType: 'input',\n//                 elementConfig: {\n//                     type: 'email',\n//                     placeholder: 'Email Address'\n//                 },\n//                 value: '',\n//                 validation: {\n//                     required: true,\n//                     isEmail: true\n//                 },\n//                 valid: false,\n//                 touched: false,\n//                 minLength: 1\n//             },\n//             password: {\n//                 elementType: 'input',\n//                 elementConfig: {\n//                     type: 'password',\n//                     placeholder: 'Password'\n//                 },\n//                 value: '',\n//                 validation: {\n//                     required: true,\n//                     minLength: 6\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             }\n//         },\n//         isSignUp: true\n//     }\n//     checkValidity(value, rules) {\n//         let isValid = true;\n//         if (!rules) {\n//             return true;\n//         }\n//         if (rules.required) {\n//             isValid = value.trim() !== '' && isValid;\n//         }\n//         if (rules.minLength) {\n//             isValid = value.length >= rules.minLength && isValid\n//         }\n//         if (rules.maxLength) {\n//             isValid = value.length <= rules.maxLength && isValid\n//         }\n//         if (rules.isEmail) {\n//             const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n//             isValid = pattern.test(value) && isValid\n//         }\n//         if (rules.isNumeric) {\n//             const pattern = /^\\d+$/;\n//             isValid = pattern.test(value) && isValid\n//         }\n//         return isValid;\n//     }\n//     authModeChangeHandler = () => {\n//         this.setState(previousState => {\n//             return { isSignUp: !previousState.isSignUp };\n//         })\n//     }\n//     inputChangedHandler(event, controlName) {\n//         const updatedControl = {\n//             ...this.state.controls,\n//             [controlName]: {\n//                 ...this.state.controls[controlName],\n//                 value: event.target.value,\n//                 valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n//                 touched: true\n//             }\n//         }\n//         this.setState({ controls: updatedControl });\n//     }\n//     submitHandler = (event) => {\n//         event.preventDefault();\n//         this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n//     }\n//     render() {\n//         let inputFormArray = [];\n//         for (let key in this.state.controls) {\n//             inputFormArray.push({\n//                 id: key,\n//                 config: this.state.controls[key]\n//             })\n//         };\n//         let form = inputFormArray.map(formElement => (\n//             <Input\n//                 key={formElement.id}\n//                 elementType={formElement.config.elementType}\n//                 elementConfig={formElement.config.elementConfig}\n//                 invalid={!formElement.config.valid}\n//                 shouldValidate={formElement.config.validation}\n//                 value={formElement.config.value}\n//                 touched={formElement.config.touched}\n//                 changed={(event) => this.inputChangedHandler(event, formElement.id)}\n//             />\n//         ));\n//         if (this.props.loading) {\n//             form = <Spinner />\n//         }\n//         let errorMessage = null;\n//         if (this.props.error) {\n//             errorMessage = <p>{this.props.error.message}</p>\n//         }\n//         let authRedirect = null;\n//         if (this.props.isAuthenticated)\n//             authRedirect = <Redirect to={this.props.authRedirectPath}/>\n//         return (\n//             <div className={classes.Auth}>\n//                 {authRedirect}\n//                 <form onSubmit={this.submitHandler}>\n//                     {errorMessage}\n//                     {form}\n//                     <Button btnType=\"Success\">SUBMIT</Button>\n//                 </form>\n//                 <Button\n//                     clicked={this.authModeChangeHandler}\n//                     btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGN-IN' : 'SIGN-UP'}\n//                 </Button>\n//             </div>\n//         );\n//     }\n// }\n// const mapStateToProps = state => {\n//     return {\n//         loading: state.auth.loading,\n//         error: state.auth.error,\n//         isAuthenticated: state.auth.token !== null,\n//         buildingBurger: state.burgerBuilder.building,\n//         authRedirectPath: state.auth.authRedirectPath\n//     };\n// };\n// const mapDispatchToProps = dispatch => {\n//     return {\n//         onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n//         onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n//     };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["D:/React/burger-builder-copy/src/containers/Auth/Auth.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\r\n// import { connect } from 'react-redux';\r\n// import { Redirect } from 'react-router-dom';\r\n\r\n// import Button from '../../components/UI/Button/Button';\r\n// import Input from '../../components/UI/Input/Input';\r\n// import Spinner from '../../components/UI/Spinner/Spinner';\r\n// import classes from './Auth.module.css';\r\n// import * as actions from '../../store/actions/index';\r\n\r\n// class Auth extends Component {\r\n\r\n//     componentDidMount() {\r\n//         if (!this.props.buildingBurger && this.props.authRedirectPath !== '/')\r\n//             this.props.onSetAuthRedirectPath();\r\n//     }\r\n\r\n//     formFillerHelper(elType, type, placeholder, value) {\r\n//         return {\r\n//             elementType: `${elType}`,\r\n//             elementConfig: {\r\n//                 type: `${type}`,\r\n//                 placeholder: `${placeholder}`\r\n//             },\r\n//             value: `${value}`,\r\n//             validation: {\r\n//                 required: true\r\n//             },\r\n//             valid: false,\r\n//             touched: false,\r\n//             minLength: 1\r\n//         }\r\n//     }\r\n\r\n//     state = {\r\n//         controls: {\r\n//             email: {\r\n//                 elementType: 'input',\r\n//                 elementConfig: {\r\n//                     type: 'email',\r\n//                     placeholder: 'Email Address'\r\n//                 },\r\n//                 value: '',\r\n//                 validation: {\r\n//                     required: true,\r\n//                     isEmail: true\r\n//                 },\r\n//                 valid: false,\r\n//                 touched: false,\r\n//                 minLength: 1\r\n//             },\r\n//             password: {\r\n//                 elementType: 'input',\r\n//                 elementConfig: {\r\n//                     type: 'password',\r\n//                     placeholder: 'Password'\r\n//                 },\r\n//                 value: '',\r\n//                 validation: {\r\n//                     required: true,\r\n//                     minLength: 6\r\n//                 },\r\n//                 valid: false,\r\n//                 touched: false,\r\n//             }\r\n//         },\r\n//         isSignUp: true\r\n//     }\r\n\r\n//     checkValidity(value, rules) {\r\n//         let isValid = true;\r\n//         if (!rules) {\r\n//             return true;\r\n//         }\r\n\r\n//         if (rules.required) {\r\n//             isValid = value.trim() !== '' && isValid;\r\n//         }\r\n\r\n//         if (rules.minLength) {\r\n//             isValid = value.length >= rules.minLength && isValid\r\n//         }\r\n\r\n//         if (rules.maxLength) {\r\n//             isValid = value.length <= rules.maxLength && isValid\r\n//         }\r\n\r\n//         if (rules.isEmail) {\r\n//             const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n//             isValid = pattern.test(value) && isValid\r\n//         }\r\n\r\n//         if (rules.isNumeric) {\r\n//             const pattern = /^\\d+$/;\r\n//             isValid = pattern.test(value) && isValid\r\n//         }\r\n\r\n//         return isValid;\r\n//     }\r\n\r\n//     authModeChangeHandler = () => {\r\n//         this.setState(previousState => {\r\n//             return { isSignUp: !previousState.isSignUp };\r\n//         })\r\n//     }\r\n\r\n//     inputChangedHandler(event, controlName) {\r\n//         const updatedControl = {\r\n//             ...this.state.controls,\r\n//             [controlName]: {\r\n//                 ...this.state.controls[controlName],\r\n//                 value: event.target.value,\r\n//                 valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n//                 touched: true\r\n//             }\r\n//         }\r\n//         this.setState({ controls: updatedControl });\r\n//     }\r\n\r\n//     submitHandler = (event) => {\r\n//         event.preventDefault();\r\n//         this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n//     }\r\n\r\n//     render() {\r\n//         let inputFormArray = [];\r\n//         for (let key in this.state.controls) {\r\n//             inputFormArray.push({\r\n//                 id: key,\r\n//                 config: this.state.controls[key]\r\n//             })\r\n//         };\r\n\r\n//         let form = inputFormArray.map(formElement => (\r\n//             <Input\r\n//                 key={formElement.id}\r\n//                 elementType={formElement.config.elementType}\r\n//                 elementConfig={formElement.config.elementConfig}\r\n//                 invalid={!formElement.config.valid}\r\n//                 shouldValidate={formElement.config.validation}\r\n//                 value={formElement.config.value}\r\n//                 touched={formElement.config.touched}\r\n//                 changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n//             />\r\n//         ));\r\n        \r\n//         if (this.props.loading) {\r\n//             form = <Spinner />\r\n//         }\r\n\r\n//         let errorMessage = null;\r\n//         if (this.props.error) {\r\n//             errorMessage = <p>{this.props.error.message}</p>\r\n//         }\r\n\r\n//         let authRedirect = null;\r\n//         if (this.props.isAuthenticated)\r\n//             authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n\r\n//         return (\r\n//             <div className={classes.Auth}>\r\n//                 {authRedirect}\r\n//                 <form onSubmit={this.submitHandler}>\r\n//                     {errorMessage}\r\n//                     {form}\r\n//                     <Button btnType=\"Success\">SUBMIT</Button>\r\n//                 </form>\r\n//                 <Button\r\n//                     clicked={this.authModeChangeHandler}\r\n//                     btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGN-IN' : 'SIGN-UP'}\r\n//                 </Button>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         loading: state.auth.loading,\r\n//         error: state.auth.error,\r\n//         isAuthenticated: state.auth.token !== null,\r\n//         buildingBurger: state.burgerBuilder.building,\r\n//         authRedirectPath: state.auth.authRedirectPath\r\n//     };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n//         onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n//     };\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}