{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\burger-builder-copy\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withOrderHandler from '../../../hoc/withErrorHandler/withErrorHandler';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: this.formFillerHelper('input', 'text', 'Your Name', ''),\n        street: this.formFillerHelper('input', 'text', 'Street', ''),\n        pinCode: this.formFillerHelper('input', 'text', 'PIN Code', ''),\n        country: this.formFillerHelper('input', 'text', 'Country', ''),\n        email: this.formFillerHelper('input', 'email', 'Your Email', ''),\n        delivery: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          valid: true\n        }\n      },\n      formIsValid: false,\n      isLoading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        isLoading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier];\n      } //alert('You continue!');\n\n\n      const order = {\n        ingredients: this.props.ings,\n        totalPrice: this.props.totPrice,\n        orderData: formData\n      };\n    };\n\n    this.inputChangedHandler = (event, formIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[formIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[formIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let id in updatedOrderForm) {\n        formIsValid = updatedOrderForm[id].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  formFillerHelper(elType, type, placeholder, value) {\n    return {\n      elementType: `${elType}`,\n      elementConfig: {\n        type: `${type}`,\n        placeholder: `${placeholder}`\n      },\n      value: `${value}`,\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false,\n      minLength: 1\n    };\n  }\n\n  checkValidity(value, rules) {\n    if (!rules) return true;\n    let isValid = false;\n\n    if (rules.required) {\n      isValid = value.trim() !== '';\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    let orderFormArray = [];\n\n    for (let key in this.state.orderForm) {\n      orderFormArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, orderFormArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      value: formElement.config.value,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }\n    }, \"ORDER\"));\n    if (this.state.isLoading) form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 20\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }, \"Enter your contact data\"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.ingredients,\n    totPrice: state.totalPrice\n  };\n};\n\nexport default connect(mapStateToProps)(withErrorHandler(ContactData));","map":{"version":3,"sources":["D:/React/burger-builder-copy/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Button","classes","axios","Spinner","Input","withOrderHandler","ContactData","state","orderForm","name","formFillerHelper","street","pinCode","country","email","delivery","elementType","elementConfig","options","value","displayValue","valid","formIsValid","isLoading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","ings","totalPrice","totPrice","orderData","inputChangedHandler","formIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","validation","touched","id","elType","type","placeholder","required","minLength","rules","isValid","trim","length","render","orderFormArray","key","push","config","form","map","formElement","mapStateToProps","withErrorHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withOrderHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\n\r\nclass ContactData extends Component {\r\n\r\n    formFillerHelper(elType, type, placeholder, value) {\r\n        return {\r\n            elementType: `${elType}`,\r\n            elementConfig: {\r\n                type: `${type}`,\r\n                placeholder: `${placeholder}`\r\n            },\r\n            value: `${value}`,\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false,\r\n            minLength: 1\r\n        }\r\n    }\r\n\r\n    state = {\r\n        orderForm: {\r\n            name: this.formFillerHelper('input', 'text', 'Your Name', ''),\r\n            street: this.formFillerHelper('input', 'text', 'Street', ''),\r\n            pinCode: this.formFillerHelper('input', 'text', 'PIN Code', ''),\r\n            country: this.formFillerHelper('input', 'text', 'Country', ''),\r\n            email: this.formFillerHelper('input', 'email', 'Your Email', ''),\r\n            delivery: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                valid: true,\r\n            }\r\n        },\r\n        formIsValid: false,\r\n        isLoading: false\r\n    }\r\n\r\n    checkValidity(value, rules) {\r\n\r\n        if (!rules)\r\n            return true;\r\n\r\n        let isValid = false;\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '';\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        this.setState({ isLoading: true });\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier];\r\n        }\r\n        //alert('You continue!');\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            totalPrice: this.props.totPrice,\r\n            orderData: formData\r\n        }\r\n        \r\n    }\r\n\r\n    inputChangedHandler = (event, formIdentifier) => {\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm\r\n        }\r\n\r\n        const updatedFormElement = {\r\n            ...updatedOrderForm[formIdentifier]\r\n        }\r\n\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\r\n        updatedFormElement.touched = true;\r\n        updatedOrderForm[formIdentifier] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let id in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[id].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n    }\r\n\r\n    render() {\r\n\r\n        let orderFormArray = [];\r\n\r\n        for (let key in this.state.orderForm) {\r\n            orderFormArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {orderFormArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        value={formElement.config.value}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                    />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if (this.state.isLoading)\r\n            form = <Spinner />\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your contact data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.ingredients,\r\n        totPrice: state.totalPrice\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withErrorHandler(ContactData));"]},"metadata":{},"sourceType":"module"}