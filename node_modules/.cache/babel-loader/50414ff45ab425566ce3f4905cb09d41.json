{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\burger-builder-copy\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\nimport classes from './Auth.module.css';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false,\n          minLength: 1\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n  }\n\n  formFillerHelper(elType, type, placeholder, value) {\n    return {\n      elementType: `${elType}`,\n      elementConfig: {\n        type: `${type}`,\n        placeholder: `${placeholder}`\n      },\n      value: `${value}`,\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false,\n      minLength: 1\n    };\n  }\n\n  render() {\n    let inputFormArray = [];\n\n    for (let key in this.state.controls) {\n      inputFormArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    ;\n    const form = inputFormArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      value: formElement.config.value,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, form, /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, \"SUBMIT\"));\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["D:/React/burger-builder-copy/src/containers/Auth/Auth.js"],"names":["React","Component","Button","Input","classes","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","minLength","password","formFillerHelper","elType","render","inputFormArray","key","push","id","config","form","map","formElement","event","inputChangedHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport classes from './Auth.module.css';\r\n\r\nclass Auth extends Component {\r\n\r\n    formFillerHelper(elType, type, placeholder, value) {\r\n        return {\r\n            elementType: `${elType}`,\r\n            elementConfig: {\r\n                type: `${type}`,\r\n                placeholder: `${placeholder}`\r\n            },\r\n            value: `${value}`,\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false,\r\n            minLength: 1\r\n        }\r\n    }\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                minLength: 1\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        let inputFormArray = [];\r\n        for (let key in this.state.controls) {\r\n            inputFormArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            })\r\n        };\r\n\r\n        const form = inputFormArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                value={formElement.config.value}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            />\r\n        ));\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {form}\r\n                <Button btnType=\"Success\">SUBMIT</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Auth;"]},"metadata":{},"sourceType":"module"}