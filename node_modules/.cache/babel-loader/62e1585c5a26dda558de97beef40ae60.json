{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport axios from '../../axios-orders';\nimport { act } from 'react-dom/test-utils';\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = orderData => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post('/orders.json', orderData).then(response => {\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAILED\n  };\n};\nexport const fetchOrdersStart = () => {\n  return dispatch => {\n    axios.get('/orders.json').then(res => {\n      let fetchedOrders = [];\n\n      for (let key in res.data) {\n        fetchedOrders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n      console.log(this.state.orders);\n    }).catch(err => {\n      dispatch(fetchOrdersFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["D:/React/burger-builder-copy/src/store/actions/orders.js"],"names":["actionTypes","axios","act","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","dispatch","post","then","response","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","FETCH_ORDERS_FAILED","fetchOrdersStart","get","res","fetchedOrders","key","push","console","log","state","err"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,GAAT,QAAoB,sBAApB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AACpD,SAAO;AACHC,IAAAA,IAAI,EAAEN,WAAW,CAACO,uBADf;AAEHC,IAAAA,OAAO,EAAEJ,EAFN;AAGHC,IAAAA,SAAS,EAAEA;AAHR,GAAP;AAKH,CANM;AAOP,OAAO,MAAMI,kBAAkB,GAAIC,KAAD,IAAW;AACzC,SAAO;AACHJ,IAAAA,IAAI,EAAEN,WAAW,CAACW,oBADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACrC,SAAO;AACHN,IAAAA,IAAI,EAAEN,WAAW,CAACa;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAIT,SAAD,IAAe;AACzC,SAAOU,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACH,mBAAmB,EAApB,CAAR;AACAX,IAAAA,KAAK,CAACe,IAAN,CAAW,cAAX,EAA2BX,SAA3B,EACKY,IADL,CACUC,QAAQ,IAAI;AACdH,MAAAA,QAAQ,CAACZ,qBAAqB,CAACe,QAAQ,CAACC,IAAT,CAAcC,IAAf,EAAqBf,SAArB,CAAtB,CAAR;AACH,KAHL,EAIKgB,KAJL,CAIWX,KAAK,IAAI;AACZK,MAAAA,QAAQ,CAACN,kBAAkB,CAACC,KAAD,CAAnB,CAAR;AACH,KANL;AAOH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMY,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHhB,IAAAA,IAAI,EAAEN,WAAW,CAACuB;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,kBAAkB,GAAIC,MAAD,IAAY;AAC1C,SAAO;AACHnB,IAAAA,IAAI,EAAEN,WAAW,CAAC0B,oBADf;AAEHD,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,eAAe,GAAIjB,KAAD,IAAW;AACtC,SAAO;AACHJ,IAAAA,IAAI,EAAEN,WAAW,CAAC4B;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClC,SAAOd,QAAQ,IAAI;AACfd,IAAAA,KAAK,CAAC6B,GAAN,CAAU,cAAV,EACKb,IADL,CACUc,GAAG,IAAI;AACT,UAAIC,aAAa,GAAG,EAApB;;AACA,WAAK,IAAIC,GAAT,IAAgBF,GAAG,CAACZ,IAApB,EAA0B;AACtBa,QAAAA,aAAa,CAACE,IAAd,CAAmB,EACf,GAAGH,GAAG,CAACZ,IAAJ,CAASc,GAAT,CADY;AAEf7B,UAAAA,EAAE,EAAE6B;AAFW,SAAnB;AAIH;;AACDlB,MAAAA,QAAQ,CAACS,kBAAkB,CAACQ,aAAD,CAAnB,CAAR;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWZ,MAAvB;AACH,KAXL,EAYKJ,KAZL,CAYWiB,GAAG,IAAI;AACVvB,MAAAA,QAAQ,CAACY,eAAe,CAACW,GAAD,CAAhB,CAAR;AACH,KAdL;AAeH,GAhBD;AAiBH,CAlBM","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\r\nimport axios from '../../axios-orders';\r\nimport { act } from 'react-dom/test-utils';\r\n\r\nexport const purchaseBurgerSuccess = (id, orderData) => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_SUCCESS,\r\n        orderId: id,\r\n        orderData: orderData\r\n    };\r\n};\r\nexport const purchaseBurgerFail = (error) => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_FAIL,\r\n        error: error\r\n    };\r\n};\r\n\r\nexport const purchaseBurgerStart = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_START\r\n    }\r\n}\r\n\r\nexport const purchaseBurger = (orderData) => {\r\n    return dispatch => {\r\n        dispatch(purchaseBurgerStart());\r\n        axios.post('/orders.json', orderData)\r\n            .then(response => {\r\n                dispatch(purchaseBurgerSuccess(response.data.name, orderData));\r\n            })\r\n            .catch(error => {\r\n                dispatch(purchaseBurgerFail(error));\r\n            });\r\n    };\r\n};\r\n\r\nexport const purchaseInit = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_INIT\r\n    };\r\n};\r\n\r\nexport const fetchOrdersSuccess = (orders) => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\r\n        orders: orders\r\n    };\r\n};\r\n\r\nexport const fetchOrdersFail = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_FAILED\r\n    };\r\n};\r\n\r\nexport const fetchOrdersStart = () => {\r\n    return dispatch => {\r\n        axios.get('/orders.json')\r\n            .then(res => {\r\n                let fetchedOrders = [];\r\n                for (let key in res.data) {\r\n                    fetchedOrders.push({\r\n                        ...res.data[key],\r\n                        id: key\r\n                    })\r\n                }\r\n                dispatch(fetchOrdersSuccess(fetchedOrders));\r\n                console.log(this.state.orders);\r\n            })\r\n            .catch(err => {\r\n                dispatch(fetchOrdersFail(err))\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}