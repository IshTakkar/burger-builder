{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authLogout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationTime');\n  localStorage.removeItem('userID');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(authLogout());\n    }, expirationTime * 1000);\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const auth = (email, password, isSignIn) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBD_9XlSoQJMc3DKitAKDGG508_XhKm9Lw';\n    if (!isSignIn) url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBD_9XlSoQJMc3DKitAKDGG508_XhKm9Lw';\n    axios.post(url, authData).then(response => {\n      console.log(response);\n      const expirationTime = new Date(new Date().getTime() + response.data.expiresIn * 10000);\n      localStorage.setItem('token', response.data.idToken);\n      localStorage.setItem('expirationTime', expirationTime);\n      localStorage.setItem('userID', response.data.localId);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(err => {\n      console.log(err);\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(authLogout());\n    } else {\n      const expirationTime = new Date(localStorage.getItem('expirationTime'));\n\n      if (expirationTime <= new Date()) {\n        dispatch(authLogout());\n      } else {\n        const userID = localStorage.getItem('userID');\n        dispatch(authSuccess(token, userID));\n        dispatch(checkAuthTimeout((expirationTime.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["D:/React/burger-builder-copy/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authLogout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","auth","email","password","isSignIn","authData","returnSecureToken","url","post","then","response","console","log","Date","getTime","data","expiresIn","setItem","localId","catch","err","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem","userID"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    };\r\n};\r\n\r\nexport const authLogout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('expirationTime');\r\n    localStorage.removeItem('userID');\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n    };\r\n};\r\n\r\nexport const checkAuthTimeout = (expirationTime) => {\r\n    return dispatch => {\r\n        setTimeout(() => {\r\n            dispatch(authLogout());\r\n        }, expirationTime * 1000);\r\n    };\r\n};\r\n\r\nexport const authSuccess = (token, userId) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        idToken: token,\r\n        userId: userId\r\n    };\r\n};\r\n\r\nexport const authFail = (error) => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: error\r\n    };\r\n};\r\n\r\nexport const auth = (email, password, isSignIn) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        const authData = {\r\n            email: email,\r\n            password: password,\r\n            returnSecureToken: true\r\n        };\r\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBD_9XlSoQJMc3DKitAKDGG508_XhKm9Lw';\r\n        if (!isSignIn)\r\n            url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBD_9XlSoQJMc3DKitAKDGG508_XhKm9Lw'\r\n        axios.post(url, authData)\r\n            .then(response => {\r\n                console.log(response);\r\n                const expirationTime = new Date(new Date().getTime() + response.data.expiresIn * 10000);\r\n                localStorage.setItem('token', response.data.idToken);\r\n                localStorage.setItem('expirationTime', expirationTime);\r\n                localStorage.setItem('userID', response.data.localId);\r\n                dispatch(authSuccess(response.data.idToken, response.data.localId));\r\n                dispatch(checkAuthTimeout(response.data.expiresIn));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                dispatch(authFail(err.response.data.error));\r\n            });\r\n    };\r\n};\r\n\r\nexport const setAuthRedirectPath = (path) => {\r\n    return {\r\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\r\n        path: path\r\n    };\r\n};\r\n\r\nexport const authCheckState = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            dispatch(authLogout());\r\n        } else {\r\n            const expirationTime = new Date(localStorage.getItem('expirationTime'));\r\n            if (expirationTime <= new Date()) {\r\n                dispatch(authLogout());\r\n            } else {\r\n                const userID = localStorage.getItem('userID');\r\n                dispatch(authSuccess(token, userID));\r\n                dispatch(checkAuthTimeout((expirationTime.getTime() - new Date().getTime()) / 1000));\r\n            }\r\n        }\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}