{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\burger-builder-copy\\\\src\\\\containers\\\\BurgerBuilder\\\\BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actionTypes from '../../store/actions';\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      totalPrice: 4,\n      purchaseable: false,\n      purchasing: false,\n      isLoading: false,\n      error: false\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      let queryParams = [];\n\n      for (let i in this.state.ingredients) {\n        if (this.state.ingredients[i]) queryParams.push(encodeURIComponent(i) + \"=\" + encodeURIComponent(this.state.ingredients[i]));\n      }\n\n      queryParams.push('price=' + this.state.totalPrice);\n      const queryString = queryParams.join('&');\n      this.props.history.push({\n        pathname: '/checkout',\n        search: '?' + queryString\n      });\n    };\n\n    this.updatePurchaseState = ingredients => {\n      const sum = Object.keys(ingredients).map(igKey => {\n        return ingredients[igKey];\n      }).reduce((sum, el) => {\n        return sum + el;\n      }, 0);\n      this.setState({\n        purchaseable: sum > 0\n      });\n    };\n  }\n\n  componentDidMount() {// axios.get('/ingredients.json')\n    //     .then(response => {\n    //         this.setState({ ingredients: response.data });\n    //     })\n    //     .catch(error => {\n    //         this.setState({ error: true });\n    //     });\n  }\n\n  // addIngredientHandler = (type) => {\n  //     const oldCount = this.state.ingredients[type];\n  //     const newCount = oldCount + 1;\n  //     const updatedIngredients = {\n  //         ...this.state.ingredients\n  //     };\n  //     updatedIngredients[type] = newCount;\n  //     const oldPrice = this.state.totalPrice;\n  //     const priceAddition = INGREDIENT_PRICES[type];\n  //     const newPrice = priceAddition + oldPrice;\n  //     this.setState({ ingredients: updatedIngredients, totalPrice: newPrice });\n  //     this.updatePurchaseState(updatedIngredients);\n  // };\n  // deleteIngredientHandler = (type) => {\n  //     const oldCount = this.state.ingredients[type];\n  //     if (oldCount <= 0) {\n  //         return;\n  //     }\n  //     const newCount = oldCount - 1;\n  //     const updatedIngredients = {\n  //         ...this.state.ingredients\n  //     };\n  //     updatedIngredients[type] = newCount;\n  //     const oldPrice = this.state.totalPrice;\n  //     const priceSub = INGREDIENT_PRICES[type];\n  //     const newPrice = oldPrice - priceSub;\n  //     this.setState({ ingredients: updatedIngredients, totalPrice: newPrice });\n  //     this.updatePurchaseState(updatedIngredients);\n  // };\n  render() {\n    let orderSummary = null;\n    const disabledInfo = { ...this.props.ings\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    let burger = this.state.error ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 41\n      }\n    }, \"Couldn't load ingredients! Please refresh.\") : /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 93\n      }\n    });\n\n    if (this.props.ings) {\n      burger = /*#__PURE__*/React.createElement(Aux, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Burger, {\n        ingredients: this.props.ings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(BuildControls, {\n        price: this.props.totPrice,\n        ingredientDeleted: this.props.onIngredientRemoved,\n        ingredientAdded: this.props.onIngredientAdded,\n        purchaseable: this.state.purchaseable,\n        ordered: this.purchaseHandler,\n        disabled: disabledInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }));\n      orderSummary = /*#__PURE__*/React.createElement(OrderSummary, {\n        continue: this.purchaseContinueHandler,\n        price: this.state.totalPrice,\n        cancel: this.purchaseCancelHandler,\n        ingredients: this.props.ings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 28\n        }\n      });\n    }\n\n    if (this.state.isLoading) {\n      orderSummary = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 28\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalCancel: this.purchaseCancelHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, orderSummary), burger);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.ingredients,\n    totPrice: state.totalPrice\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIngredientAdded: name => dispatch({\n      type: actionTypes.ADD_INGREDIENT,\n      ingredientName: name\n    }),\n    onIngredientRemoved: name => dispatch({\n      type: actionTypes.REMOVE_INGREDIENT,\n      ingredientName: name\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));","map":{"version":3,"sources":["D:/React/burger-builder-copy/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","connect","Aux","Burger","BuildControls","Modal","OrderSummary","axios","Spinner","withErrorHandler","actionTypes","BurgerBuilder","state","totalPrice","purchaseable","purchasing","isLoading","error","purchaseHandler","setState","purchaseCancelHandler","purchaseContinueHandler","queryParams","i","ingredients","push","encodeURIComponent","queryString","join","props","history","pathname","search","updatePurchaseState","sum","Object","keys","map","igKey","reduce","el","componentDidMount","render","orderSummary","disabledInfo","ings","key","burger","totPrice","onIngredientRemoved","onIngredientAdded","mapStateToProps","mapDispatchToProps","dispatch","name","type","ADD_INGREDIENT","ingredientName","REMOVE_INGREDIENT"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Aux from '../../hoc/Auxiliary/Auxiliary'\r\nimport Burger from '../../components/Burger/Burger';\r\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\r\nimport axios from '../../axios-orders';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actionTypes from '../../store/actions';\r\n\r\nclass BurgerBuilder extends Component {\r\n\r\n    state = {\r\n        totalPrice: 4,\r\n        purchaseable: false,\r\n        purchasing: false,\r\n        isLoading: false,\r\n        error: false\r\n    };\r\n\r\n    componentDidMount () {\r\n        // axios.get('/ingredients.json')\r\n        //     .then(response => {\r\n        //         this.setState({ ingredients: response.data });\r\n        //     })\r\n        //     .catch(error => {\r\n        //         this.setState({ error: true });\r\n        //     });\r\n    };\r\n\r\n    purchaseHandler = () => {\r\n        this.setState({ purchasing: true });\r\n    };\r\n\r\n    purchaseCancelHandler = () => {\r\n        this.setState({ purchasing: false });\r\n    };\r\n\r\n    purchaseContinueHandler = () => {\r\n        \r\n        let queryParams = [];\r\n        for (let i in this.state.ingredients) {\r\n            if (this.state.ingredients[i])\r\n                queryParams.push(encodeURIComponent(i) + \"=\" + encodeURIComponent(this.state.ingredients[i]));\r\n        }\r\n\r\n        queryParams.push('price=' + this.state.totalPrice);\r\n        const queryString = queryParams.join('&');\r\n        this.props.history.push({\r\n            pathname: '/checkout',\r\n            search: '?' + queryString\r\n        });\r\n    }\r\n\r\n    updatePurchaseState = (ingredients) => {\r\n\r\n        const sum = Object.keys(ingredients)\r\n            .map(igKey => {\r\n                return ingredients[igKey];\r\n            })\r\n            .reduce((sum, el) => {\r\n                return sum + el;\r\n            }, 0);\r\n        \r\n        this.setState({ purchaseable: sum > 0 });\r\n    };\r\n\r\n    // addIngredientHandler = (type) => {\r\n    //     const oldCount = this.state.ingredients[type];\r\n    //     const newCount = oldCount + 1;\r\n    //     const updatedIngredients = {\r\n    //         ...this.state.ingredients\r\n    //     };\r\n    //     updatedIngredients[type] = newCount;\r\n\r\n    //     const oldPrice = this.state.totalPrice;\r\n    //     const priceAddition = INGREDIENT_PRICES[type];\r\n    //     const newPrice = priceAddition + oldPrice;\r\n\r\n    //     this.setState({ ingredients: updatedIngredients, totalPrice: newPrice });\r\n\r\n    //     this.updatePurchaseState(updatedIngredients);\r\n    // };\r\n\r\n    // deleteIngredientHandler = (type) => {\r\n    //     const oldCount = this.state.ingredients[type];\r\n    //     if (oldCount <= 0) {\r\n    //         return;\r\n    //     }\r\n    //     const newCount = oldCount - 1;\r\n    //     const updatedIngredients = {\r\n    //         ...this.state.ingredients\r\n    //     };\r\n    //     updatedIngredients[type] = newCount;\r\n\r\n    //     const oldPrice = this.state.totalPrice;\r\n    //     const priceSub = INGREDIENT_PRICES[type];\r\n    //     const newPrice = oldPrice - priceSub;\r\n\r\n    //     this.setState({ ingredients: updatedIngredients, totalPrice: newPrice });\r\n\r\n    //     this.updatePurchaseState(updatedIngredients);\r\n    // };\r\n\r\n \r\n    render() {\r\n\r\n        let orderSummary = null;\r\n\r\n        const disabledInfo = {\r\n            ...this.props.ings\r\n        };\r\n\r\n        for (let key in disabledInfo) {\r\n            disabledInfo[key] = disabledInfo[key] <= 0;\r\n        }\r\n\r\n        let burger = this.state.error ? <p>Couldn't load ingredients! Please refresh.</p> : <Spinner />;\r\n        if(this.props.ings) \r\n        {\r\n            burger = (\r\n                <Aux>\r\n                    <Burger\r\n                        ingredients={this.props.ings}\r\n                    />\r\n                    <BuildControls\r\n                        price={this.props.totPrice}\r\n                        ingredientDeleted={this.props.onIngredientRemoved}\r\n                        ingredientAdded={this.props.onIngredientAdded}\r\n                        purchaseable={this.state.purchaseable}\r\n                        ordered={this.purchaseHandler}\r\n                        disabled={disabledInfo}\r\n                    />\r\n                </Aux>\r\n            );\r\n\r\n            orderSummary = <OrderSummary\r\n                    continue={this.purchaseContinueHandler}\r\n                    price={this.state.totalPrice}\r\n                    cancel={this.purchaseCancelHandler}\r\n                    ingredients={this.props.ings}\r\n                />\r\n        }\r\n\r\n        if (this.state.isLoading) {\r\n            orderSummary = <Spinner />\r\n        }\r\n\r\n        return (\r\n            <Aux>\r\n                <Modal show={this.state.purchasing} modalCancel={this.purchaseCancelHandler}>\r\n                    {orderSummary}\r\n                </Modal>\r\n                {burger}\r\n            </Aux>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.ingredients,\r\n        totPrice: state.totalPrice\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onIngredientAdded: (name) => dispatch({ type: actionTypes.ADD_INGREDIENT, ingredientName: name }),\r\n        onIngredientRemoved: (name) => dispatch({ type: actionTypes.REMOVE_INGREDIENT, ingredientName: name })\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));"]},"metadata":{},"sourceType":"module"}