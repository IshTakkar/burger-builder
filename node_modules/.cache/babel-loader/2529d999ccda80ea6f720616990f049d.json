{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\burger-builder-copy\\\\src\\\\components\\\\Orders\\\\Orders.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Order from '../Order/CheckoutSummary/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport Spinner from '../UI/Spinner/Spinner';\nimport * as actions from '../../store/actions/index';\n\nclass Orders extends Component {\n  componentDidMount() {\n    this.props.onFetchOrders(this.props.token);\n  }\n\n  render() {\n    let ord = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 19\n      }\n    });\n\n    if (!this.props.loading) {\n      ord = this.props.orders.map(order => /*#__PURE__*/React.createElement(Order, {\n        key: order.id,\n        ingredients: order.ingredients,\n        price: order.totalPrice,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, ord);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.orders.orders,\n    loading: state.orders.loading,\n    token: state.auth.token\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["D:/React/burger-builder-copy/src/components/Orders/Orders.js"],"names":["React","Component","connect","Order","axios","withErrorHandler","Spinner","actions","Orders","componentDidMount","props","onFetchOrders","token","render","ord","loading","orders","map","order","id","ingredients","totalPrice","mapStateToProps","state","auth","mapDispatchToProps","dispatch","userId","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;;AAEA,MAAMC,MAAN,SAAqBP,SAArB,CAA+B;AAE3BQ,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWC,aAAX,CAAyB,KAAKD,KAAL,CAAWE,KAApC;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAIC,GAAG,gBAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;;AACA,QAAI,CAAC,KAAKJ,KAAL,CAAWK,OAAhB,EAAyB;AACrBD,MAAAA,GAAG,GACC,KAAKJ,KAAL,CAAWM,MAAX,CAAkBC,GAAlB,CAAsBC,KAAK,iBACvB,oBAAC,KAAD;AACI,QAAA,GAAG,EAAEA,KAAK,CAACC,EADf;AAEI,QAAA,WAAW,EAAED,KAAK,CAACE,WAFvB;AAGI,QAAA,KAAK,EAAEF,KAAK,CAACG,UAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAQH;;AACD,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKP,GADL,CADJ;AAKH;;AAvB0B;;AA2B/B,MAAMQ,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHP,IAAAA,MAAM,EAAEO,KAAK,CAACP,MAAN,CAAaA,MADlB;AAEHD,IAAAA,OAAO,EAAEQ,KAAK,CAACP,MAAN,CAAaD,OAFnB;AAGHH,IAAAA,KAAK,EAAEW,KAAK,CAACC,IAAN,CAAWZ;AAHf,GAAP;AAKH,CAND;;AAQA,MAAMa,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHf,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQe,MAAR,KAAmBD,QAAQ,CAACnB,OAAO,CAACqB,WAAR,CAAoBhB,KAApB,CAAD;AADvC,GAAP;AAGH,CAJD;;AAMA,eAAeV,OAAO,CAACoB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CpB,gBAAgB,CAACG,MAAD,EAASJ,KAAT,CAA7D,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Order from '../Order/CheckoutSummary/Order';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport Spinner from '../UI/Spinner/Spinner';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nclass Orders extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchOrders(this.props.token);\r\n    }\r\n\r\n    render() {\r\n        let ord = <Spinner />;\r\n        if (!this.props.loading) {\r\n            ord = \r\n                this.props.orders.map(order => (\r\n                    <Order\r\n                        key={order.id}\r\n                        ingredients={order.ingredients}\r\n                        price={order.totalPrice}\r\n                    />\r\n                ))\r\n        }\r\n        return (\r\n            <div>\r\n                {ord}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders: state.orders.orders,\r\n        loading: state.orders.loading,\r\n        token: state.auth.token\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"]},"metadata":{},"sourceType":"module"}