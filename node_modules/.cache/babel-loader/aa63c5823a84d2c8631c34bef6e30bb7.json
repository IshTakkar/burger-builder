{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\burger-builder-copy\\\\src\\\\containers\\\\BurgerBuilder\\\\BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      purchasing: false\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      this.props.onInitPurchase();\n      this.props.history.push({\n        pathname: '/checkout'\n      });\n    };\n\n    this.updatePurchaseState = ingredients => {\n      const sum = Object.keys(ingredients).map(igKey => {\n        return ingredients[igKey];\n      }).reduce((sum, el) => {\n        return sum + el;\n      }, 0);\n      return sum > 0;\n    };\n  }\n\n  componentDidMount() {\n    this.props.onInitIngredients();\n  }\n\n  // addIngredientHandler = (type) => {\n  //     const oldCount = this.state.ingredients[type];\n  //     const newCount = oldCount + 1;\n  //     const updatedIngredients = {\n  //         ...this.state.ingredients\n  //     };\n  //     updatedIngredients[type] = newCount;\n  //     const oldPrice = this.state.totalPrice;\n  //     const priceAddition = INGREDIENT_PRICES[type];\n  //     const newPrice = priceAddition + oldPrice;\n  //     this.setState({ ingredients: updatedIngredients, totalPrice: newPrice });\n  //     this.updatePurchaseState(updatedIngredients);\n  // };\n  // deleteIngredientHandler = (type) => {\n  //     const oldCount = this.state.ingredients[type];\n  //     if (oldCount <= 0) {\n  //         return;\n  //     }\n  //     const newCount = oldCount - 1;\n  //     const updatedIngredients = {\n  //         ...this.state.ingredients\n  //     };\n  //     updatedIngredients[type] = newCount;\n  //     const oldPrice = this.state.totalPrice;\n  //     const priceSub = INGREDIENT_PRICES[type];\n  //     const newPrice = oldPrice - priceSub;\n  //     this.setState({ ingredients: updatedIngredients, totalPrice: newPrice });\n  //     this.updatePurchaseState(updatedIngredients);\n  // };\n  render() {\n    let orderSummary = null;\n    const disabledInfo = { ...this.props.ings\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    let burger = this.props.err ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 39\n      }\n    }, \"Couldn't load ingredients! Please refresh.\") : /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 91\n      }\n    });\n\n    if (this.props.ings) {\n      burger = /*#__PURE__*/React.createElement(Aux, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Burger, {\n        ingredients: this.props.ings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(BuildControls, {\n        price: this.props.totPrice,\n        ingredientDeleted: this.props.onIngredientRemoved,\n        ingredientAdded: this.props.onIngredientAdded,\n        purchaseable: this.updatePurchaseState(this.props.ings),\n        ordered: this.purchaseHandler,\n        disabled: disabledInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }\n      }));\n      orderSummary = /*#__PURE__*/React.createElement(OrderSummary, {\n        continue: this.purchaseContinueHandler,\n        price: this.props.totPrice,\n        cancel: this.purchaseCancelHandler,\n        ingredients: this.props.ings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 28\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalCancel: this.purchaseCancelHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }, orderSummary), burger);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    totPrice: state.burgerBuilder.totalPrice,\n    err: state.burgerBuilder.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIngredientAdded: name => dispatch(actions.addIngredient(name)),\n    onIngredientRemoved: name => dispatch(actions.removeIngredient(name)),\n    onInitIngredients: () => dispatch(actions.initIngredients()),\n    onInitPurchase: () => dispatch(actions.purchaseInit())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));","map":{"version":3,"sources":["D:/React/burger-builder-copy/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","connect","Aux","Burger","BuildControls","Modal","OrderSummary","axios","Spinner","withErrorHandler","actions","BurgerBuilder","state","purchasing","purchaseHandler","setState","purchaseCancelHandler","purchaseContinueHandler","props","onInitPurchase","history","push","pathname","updatePurchaseState","ingredients","sum","Object","keys","map","igKey","reduce","el","componentDidMount","onInitIngredients","render","orderSummary","disabledInfo","ings","key","burger","err","totPrice","onIngredientRemoved","onIngredientAdded","mapStateToProps","burgerBuilder","totalPrice","error","mapDispatchToProps","dispatch","name","addIngredient","removeIngredient","initIngredients","purchaseInit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Aux from '../../hoc/Auxiliary/Auxiliary'\r\nimport Burger from '../../components/Burger/Burger';\r\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\r\nimport axios from '../../axios-orders';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nclass BurgerBuilder extends Component {\r\n\r\n    state = {\r\n        purchasing: false,\r\n    };\r\n\r\n    componentDidMount () {\r\n        this.props.onInitIngredients();\r\n    };\r\n\r\n    purchaseHandler = () => {\r\n        this.setState({ purchasing: true });\r\n    };\r\n\r\n    purchaseCancelHandler = () => {\r\n        this.setState({ purchasing: false });\r\n    };\r\n\r\n    purchaseContinueHandler = () => {\r\n        this.props.onInitPurchase();\r\n        this.props.history.push({\r\n            pathname: '/checkout',\r\n        });\r\n    }\r\n\r\n    updatePurchaseState = (ingredients) => {\r\n\r\n        const sum = Object.keys(ingredients)\r\n            .map(igKey => {\r\n                return ingredients[igKey];\r\n            })\r\n            .reduce((sum, el) => {\r\n                return sum + el;\r\n            }, 0);\r\n        \r\n        return sum > 0;\r\n    };\r\n\r\n    // addIngredientHandler = (type) => {\r\n    //     const oldCount = this.state.ingredients[type];\r\n    //     const newCount = oldCount + 1;\r\n    //     const updatedIngredients = {\r\n    //         ...this.state.ingredients\r\n    //     };\r\n    //     updatedIngredients[type] = newCount;\r\n\r\n    //     const oldPrice = this.state.totalPrice;\r\n    //     const priceAddition = INGREDIENT_PRICES[type];\r\n    //     const newPrice = priceAddition + oldPrice;\r\n\r\n    //     this.setState({ ingredients: updatedIngredients, totalPrice: newPrice });\r\n\r\n    //     this.updatePurchaseState(updatedIngredients);\r\n    // };\r\n\r\n    // deleteIngredientHandler = (type) => {\r\n    //     const oldCount = this.state.ingredients[type];\r\n    //     if (oldCount <= 0) {\r\n    //         return;\r\n    //     }\r\n    //     const newCount = oldCount - 1;\r\n    //     const updatedIngredients = {\r\n    //         ...this.state.ingredients\r\n    //     };\r\n    //     updatedIngredients[type] = newCount;\r\n\r\n    //     const oldPrice = this.state.totalPrice;\r\n    //     const priceSub = INGREDIENT_PRICES[type];\r\n    //     const newPrice = oldPrice - priceSub;\r\n\r\n    //     this.setState({ ingredients: updatedIngredients, totalPrice: newPrice });\r\n\r\n    //     this.updatePurchaseState(updatedIngredients);\r\n    // };\r\n\r\n \r\n    render() {\r\n\r\n        let orderSummary = null;\r\n\r\n        const disabledInfo = {\r\n            ...this.props.ings\r\n        };\r\n\r\n        for (let key in disabledInfo) {\r\n            disabledInfo[key] = disabledInfo[key] <= 0;\r\n        }\r\n\r\n        let burger = this.props.err ? <p>Couldn't load ingredients! Please refresh.</p> : <Spinner />;\r\n        if(this.props.ings) \r\n        {\r\n            burger = (\r\n                <Aux>\r\n                    <Burger\r\n                        ingredients={this.props.ings}\r\n                    />\r\n                    <BuildControls\r\n                        price={this.props.totPrice}\r\n                        ingredientDeleted={this.props.onIngredientRemoved}\r\n                        ingredientAdded={this.props.onIngredientAdded}\r\n                        purchaseable={this.updatePurchaseState(this.props.ings)}\r\n                        ordered={this.purchaseHandler}\r\n                        disabled={disabledInfo}\r\n                    />\r\n                </Aux>\r\n            );\r\n\r\n            orderSummary = <OrderSummary\r\n                    continue={this.purchaseContinueHandler}\r\n                    price={this.props.totPrice}\r\n                    cancel={this.purchaseCancelHandler}\r\n                    ingredients={this.props.ings}\r\n                />\r\n        }\r\n\r\n        return (\r\n            <Aux>\r\n                <Modal show={this.state.purchasing} modalCancel={this.purchaseCancelHandler}>\r\n                    {orderSummary}\r\n                </Modal>\r\n                {burger}\r\n            </Aux>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        totPrice: state.burgerBuilder.totalPrice,\r\n        err: state.burgerBuilder.error\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onIngredientAdded: (name) => dispatch(actions.addIngredient(name)),\r\n        onIngredientRemoved: (name) => dispatch(actions.removeIngredient(name)),\r\n        onInitIngredients: () => dispatch(actions.initIngredients()),\r\n        onInitPurchase: () => dispatch(actions.purchaseInit())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));"]},"metadata":{},"sourceType":"module"}