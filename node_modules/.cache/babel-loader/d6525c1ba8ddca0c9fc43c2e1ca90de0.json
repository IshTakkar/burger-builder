{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\burger-builder-copy\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\n// import React, { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import Button from '../../components/UI/Button/Button';\n// import Input from '../../components/UI/Input/Input';\n// import Spinner from '../../components/UI/Spinner/Spinner';\n// import classes from './Auth.module.css';\n// import * as actions from '../../store/actions/index';\n// class Auth extends Component {\n//     componentDidMount() {\n//         if (!this.props.buildingBurger && this.props.authRedirectPath !== '/')\n//             this.props.onSetAuthRedirectPath();\n//     }\n//     formFillerHelper(elType, type, placeholder, value) {\n//         return {\n//             elementType: `${elType}`,\n//             elementConfig: {\n//                 type: `${type}`,\n//                 placeholder: `${placeholder}`\n//             },\n//             value: `${value}`,\n//             validation: {\n//                 required: true\n//             },\n//             valid: false,\n//             touched: false,\n//             minLength: 1\n//         }\n//     }\n//     state = {\n//         controls: {\n//             email: {\n//                 elementType: 'input',\n//                 elementConfig: {\n//                     type: 'email',\n//                     placeholder: 'Email Address'\n//                 },\n//                 value: '',\n//                 validation: {\n//                     required: true,\n//                     isEmail: true\n//                 },\n//                 valid: false,\n//                 touched: false,\n//                 minLength: 1\n//             },\n//             password: {\n//                 elementType: 'input',\n//                 elementConfig: {\n//                     type: 'password',\n//                     placeholder: 'Password'\n//                 },\n//                 value: '',\n//                 validation: {\n//                     required: true,\n//                     minLength: 6\n//                 },\n//                 valid: false,\n//                 touched: false,\n//             }\n//         },\n//         isSignUp: true\n//     }\n//     checkValidity(value, rules) {\n//         let isValid = true;\n//         if (!rules) {\n//             return true;\n//         }\n//         if (rules.required) {\n//             isValid = value.trim() !== '' && isValid;\n//         }\n//         if (rules.minLength) {\n//             isValid = value.length >= rules.minLength && isValid\n//         }\n//         if (rules.maxLength) {\n//             isValid = value.length <= rules.maxLength && isValid\n//         }\n//         if (rules.isEmail) {\n//             const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n//             isValid = pattern.test(value) && isValid\n//         }\n//         if (rules.isNumeric) {\n//             const pattern = /^\\d+$/;\n//             isValid = pattern.test(value) && isValid\n//         }\n//         return isValid;\n//     }\n//     authModeChangeHandler = () => {\n//         this.setState(previousState => {\n//             return { isSignUp: !previousState.isSignUp };\n//         })\n//     }\n//     inputChangedHandler(event, controlName) {\n//         const updatedControl = {\n//             ...this.state.controls,\n//             [controlName]: {\n//                 ...this.state.controls[controlName],\n//                 value: event.target.value,\n//                 valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n//                 touched: true\n//             }\n//         }\n//         this.setState({ controls: updatedControl });\n//     }\n//     submitHandler = (event) => {\n//         event.preventDefault();\n//         this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n//     }\n//     render() {\n//         let inputFormArray = [];\n//         for (let key in this.state.controls) {\n//             inputFormArray.push({\n//                 id: key,\n//                 config: this.state.controls[key]\n//             })\n//         };\n//         let form = inputFormArray.map(formElement => (\n//             <Input\n//                 key={formElement.id}\n//                 elementType={formElement.config.elementType}\n//                 elementConfig={formElement.config.elementConfig}\n//                 invalid={!formElement.config.valid}\n//                 shouldValidate={formElement.config.validation}\n//                 value={formElement.config.value}\n//                 touched={formElement.config.touched}\n//                 changed={(event) => this.inputChangedHandler(event, formElement.id)}\n//             />\n//         ));\n//         if (this.props.loading) {\n//             form = <Spinner />\n//         }\n//         let errorMessage = null;\n//         if (this.props.error) {\n//             errorMessage = <p>{this.props.error.message}</p>\n//         }\n//         let authRedirect = null;\n//         if (this.props.isAuthenticated)\n//             authRedirect = <Redirect to={this.props.authRedirectPath}/>\n//         return (\n//             <div className={classes.Auth}>\n//                 {authRedirect}\n//                 <form onSubmit={this.submitHandler}>\n//                     {errorMessage}\n//                     {form}\n//                     <Button btnType=\"Success\">SUBMIT</Button>\n//                 </form>\n//                 <Button\n//                     clicked={this.authModeChangeHandler}\n//                     btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGN-IN' : 'SIGN-UP'}\n//                 </Button>\n//             </div>\n//         );\n//     }\n// }\n// const mapStateToProps = state => {\n//     return {\n//         loading: state.auth.loading,\n//         error: state.auth.error,\n//         isAuthenticated: state.auth.token !== null,\n//         buildingBurger: state.burgerBuilder.building,\n//         authRedirectPath: state.auth.authRedirectPath\n//     };\n// };\n// const mapDispatchToProps = dispatch => {\n//     return {\n//         onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n//         onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n//     };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.mocss';\nimport * as actions from '../../store/actions/index';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 13\n      }\n    }));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 20\n        }\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 17\n        }\n      }, this.props.error.message);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 28\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 13\n      }\n    }, authRedirect, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }\n    }, form, /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 21\n      }\n    }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      btnType: \"Danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 17\n      }\n    }, \"SWITCH TO \", this.state.isSignup ? 'SIGNIN' : 'SIGNUP'));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["D:/React/burger-builder-copy/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","Input","Button","Spinner","classes","actions","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","componentDidMount","buildingBurger","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"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","sourcesContent":["// import React, { Component } from 'react';\r\n// import { connect } from 'react-redux';\r\n// import { Redirect } from 'react-router-dom';\r\n\r\n// import Button from '../../components/UI/Button/Button';\r\n// import Input from '../../components/UI/Input/Input';\r\n// import Spinner from '../../components/UI/Spinner/Spinner';\r\n// import classes from './Auth.module.css';\r\n// import * as actions from '../../store/actions/index';\r\n\r\n// class Auth extends Component {\r\n\r\n//     componentDidMount() {\r\n//         if (!this.props.buildingBurger && this.props.authRedirectPath !== '/')\r\n//             this.props.onSetAuthRedirectPath();\r\n//     }\r\n\r\n//     formFillerHelper(elType, type, placeholder, value) {\r\n//         return {\r\n//             elementType: `${elType}`,\r\n//             elementConfig: {\r\n//                 type: `${type}`,\r\n//                 placeholder: `${placeholder}`\r\n//             },\r\n//             value: `${value}`,\r\n//             validation: {\r\n//                 required: true\r\n//             },\r\n//             valid: false,\r\n//             touched: false,\r\n//             minLength: 1\r\n//         }\r\n//     }\r\n\r\n//     state = {\r\n//         controls: {\r\n//             email: {\r\n//                 elementType: 'input',\r\n//                 elementConfig: {\r\n//                     type: 'email',\r\n//                     placeholder: 'Email Address'\r\n//                 },\r\n//                 value: '',\r\n//                 validation: {\r\n//                     required: true,\r\n//                     isEmail: true\r\n//                 },\r\n//                 valid: false,\r\n//                 touched: false,\r\n//                 minLength: 1\r\n//             },\r\n//             password: {\r\n//                 elementType: 'input',\r\n//                 elementConfig: {\r\n//                     type: 'password',\r\n//                     placeholder: 'Password'\r\n//                 },\r\n//                 value: '',\r\n//                 validation: {\r\n//                     required: true,\r\n//                     minLength: 6\r\n//                 },\r\n//                 valid: false,\r\n//                 touched: false,\r\n//             }\r\n//         },\r\n//         isSignUp: true\r\n//     }\r\n\r\n//     checkValidity(value, rules) {\r\n//         let isValid = true;\r\n//         if (!rules) {\r\n//             return true;\r\n//         }\r\n\r\n//         if (rules.required) {\r\n//             isValid = value.trim() !== '' && isValid;\r\n//         }\r\n\r\n//         if (rules.minLength) {\r\n//             isValid = value.length >= rules.minLength && isValid\r\n//         }\r\n\r\n//         if (rules.maxLength) {\r\n//             isValid = value.length <= rules.maxLength && isValid\r\n//         }\r\n\r\n//         if (rules.isEmail) {\r\n//             const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n//             isValid = pattern.test(value) && isValid\r\n//         }\r\n\r\n//         if (rules.isNumeric) {\r\n//             const pattern = /^\\d+$/;\r\n//             isValid = pattern.test(value) && isValid\r\n//         }\r\n\r\n//         return isValid;\r\n//     }\r\n\r\n//     authModeChangeHandler = () => {\r\n//         this.setState(previousState => {\r\n//             return { isSignUp: !previousState.isSignUp };\r\n//         })\r\n//     }\r\n\r\n//     inputChangedHandler(event, controlName) {\r\n//         const updatedControl = {\r\n//             ...this.state.controls,\r\n//             [controlName]: {\r\n//                 ...this.state.controls[controlName],\r\n//                 value: event.target.value,\r\n//                 valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n//                 touched: true\r\n//             }\r\n//         }\r\n//         this.setState({ controls: updatedControl });\r\n//     }\r\n\r\n//     submitHandler = (event) => {\r\n//         event.preventDefault();\r\n//         this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n//     }\r\n\r\n//     render() {\r\n//         let inputFormArray = [];\r\n//         for (let key in this.state.controls) {\r\n//             inputFormArray.push({\r\n//                 id: key,\r\n//                 config: this.state.controls[key]\r\n//             })\r\n//         };\r\n\r\n//         let form = inputFormArray.map(formElement => (\r\n//             <Input\r\n//                 key={formElement.id}\r\n//                 elementType={formElement.config.elementType}\r\n//                 elementConfig={formElement.config.elementConfig}\r\n//                 invalid={!formElement.config.valid}\r\n//                 shouldValidate={formElement.config.validation}\r\n//                 value={formElement.config.value}\r\n//                 touched={formElement.config.touched}\r\n//                 changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n//             />\r\n//         ));\r\n        \r\n//         if (this.props.loading) {\r\n//             form = <Spinner />\r\n//         }\r\n\r\n//         let errorMessage = null;\r\n//         if (this.props.error) {\r\n//             errorMessage = <p>{this.props.error.message}</p>\r\n//         }\r\n\r\n//         let authRedirect = null;\r\n//         if (this.props.isAuthenticated)\r\n//             authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n\r\n//         return (\r\n//             <div className={classes.Auth}>\r\n//                 {authRedirect}\r\n//                 <form onSubmit={this.submitHandler}>\r\n//                     {errorMessage}\r\n//                     {form}\r\n//                     <Button btnType=\"Success\">SUBMIT</Button>\r\n//                 </form>\r\n//                 <Button\r\n//                     clicked={this.authModeChangeHandler}\r\n//                     btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGN-IN' : 'SIGN-UP'}\r\n//                 </Button>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         loading: state.auth.loading,\r\n//         error: state.auth.error,\r\n//         isAuthenticated: state.auth.token !== null,\r\n//         buildingBurger: state.burgerBuilder.building,\r\n//         authRedirectPath: state.auth.authRedirectPath\r\n//     };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n//         onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n//     };\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.mocss';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    checkValidity(value, rules) {\r\n        let isValid = true;\r\n        if (!rules) {\r\n            return true;\r\n        }\r\n\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid\r\n        }\r\n\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        };\r\n        this.setState({ controls: updatedControls });\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return { isSignup: !prevState.isSignup };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}